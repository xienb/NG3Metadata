<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=GB2312">
<link rel="stylesheet" href="res/temp1.css" type="text/css">
<script type='text/javascript' src='binary/dynaload.js?80'></script>
<script language="JavaScript">
 function OnReady(id)
 {
  if(id=='AF') {
   AF.func("Build", "treelist/t1.xml");
   AF.func("Load", "treelistdata/data.txt");
 }
 else {
var xml = '<?xml version="1.0"?>\
<TreeList>\
<Properties isShowGrid="false" isAutoFitWidth="true" headerHeight="0"></Properties>\
<Cols><Col name="filterstr" width="100">filterstr</Col></Cols>\
<Table>\
<TR><filterstr></filterstr></TR>\
<TR><filterstr>Freight>400</filterstr></TR>\
<TR><filterstr>indexOf(ShipName, "ome")>=0</filterstr></TR>\
<TR><filterstr>indexOf(ShipName, "ome")>=0 and left(RequiredDate, 4)="2007"</filterstr></TR>\
<TR><filterstr>indexOf(ShipName, "ome")>=0 and not left(RequiredDate, 4)="2007"</filterstr></TR>\
<TR><filterstr>country=js("jsFunc")</filterstr></TR>\
</Table>\
</TreeList>';
　 AE.func("BuildTreeList", xml);
  }
 }

 function filter()
 {
   var filterStr = AE.func("GetText", "");
   AF.func("Filter", filterStr);
 }

 //供过滤表达式回调的函数
 function jsFunc()
 {
   return "Finland";
 }
</script>
</head>

<body vlink=#0000ff link=#0000ff>
<center>

<table cols=4 border=0 width=100%>
<col valign=top width=90>
<col valign=top>
<tr>
<td align=center><img src='res/how.bmp'></td>
<td><b>1</b>.本页演示通过表达式实现过滤功能；<br>
<b>2</b>.注意最后一个过滤表达式演示了 js( ) 函数，能<b>反向调用(Callback)页面的JavaScript</b>；</td>
</tr>
</table>

<table cols=3>
<tr height=23>
<td align=right>请选择或输入表达式:</td>
<td width=430 height=23>
	<script>insertEdit('AE', 'border=client;type=editableDroptreelist;isUseContextFont=false;DataCol=filterstr;displaycol=filterstr')</script>
</td>
<td align=left>&nbsp;<input type=button value=" 执行过滤 " onClick="filter()"></td>
</tr>
<tr height=2><td colspan=3/></tr>
</table>


<div style="position:relative;width:96%;height:380px">
	<script>insertTreeList('AF', '')</script>
</div>


<!--  以下为技术分析区 -->
<br><br><br>
<table border=0 cols=1 border=0 width=97% style='line-height:21px'>
<tr><td><img src='res/tech.jpg'></td></tr><tr><td>
<b>1</b>.单纯的过滤功能用处不大，但是过滤下拉Treelist是很有可能会发生的，下一个demo页中将会遇到；<br>
<b>2</b>.可查看创建该TreeList的<a href="treelist/t1.xml" target=_blank>XML描述文件</a>；<br>
<b>3</b>.源码分析：关注下面第10到22行之间的下拉框的另类创建法：<br>
<pre class='cpp'>
&lt;script language="JavaScript"&gt;
 function OnReady(id)
 {
  if(id=='AF') {
   AF.func("Build", "treelist/t1.xml");
   AF.func("Load", "treelistdata/data.txt");
  }
  else if(id=='AE') {	//Edit控件
   //直接写在页面中的XML文档串
   var xml = '&lt;?xml version="1.0"?&gt;\
   &lt;TreeList&gt;\
   &lt;Properties isShowGrid="false" isAutoFitWidth="true" headerHeight="0"/&gt;\
   &lt;Cols&gt;&lt;Col name="filterstr" width="100"&gt;filterstr&lt;/Col&gt;&lt;/Cols&gt;\
   &lt;Table&gt;\
   &lt;TR&gt;&lt;filterstr&gt;&lt;/filterstr&gt;&lt;/TR&gt;\
   &lt;TR&gt;&lt;filterstr&gt;Freight&gt;400&lt;/filterstr&gt;&lt;/TR&gt;\
   &lt;TR&gt;&lt;filterstr&gt;indexOf(ShipName, "ome")&gt;=0&lt;/filterstr&gt;&lt;/TR&gt;\
   &lt;TR&gt;&lt;filterstr&gt;indexOf(ShipName, "ome")&gt;=0 and left(RequiredDate, 4)="2007"&lt;/filterstr&gt;&lt;/TR&gt;\
   &lt;TR&gt;&lt;filterstr&gt;indexOf(ShipName, "ome")&gt;=0 and not left(RequiredDate, 4)="2007"&lt;/filterstr&gt;&lt;/TR&gt;\
   &lt;TR&gt;&lt;filterstr&gt;country=js("jsFunc")&lt;/filterstr&gt;&lt;/TR&gt;\
   &lt;/Table&gt;\
   &lt;/TreeList&gt;';
   AE.func("BuildTreeList", xml);
  }
 }

 //按钮执行的js
 function filter()
 {
  var filterStr = AE.func("GetText", "");
  AF.func("Filter", filterStr);
 }

 //供过滤表达式反向调用的函数
 function jsFunc()
 {
   return "Finland";
 }
&lt;/script&gt;</pre>
</td></tr></table>

<br>
</center>
</body>
<script type='text/javascript' src='res/nstd.js'></script>
</html>